token: [@0,0:2='int',<15>,1:0]
token: [@1,4:7='main',<44>,1:4]
token: [@2,8:8='(',<20>,1:8]
token: [@3,9:9=')',<21>,1:9]
token: [@4,11:11='{',<24>,2:0]
token: [@5,14:16='int',<15>,3:1]
token: [@6,18:18='a',<44>,3:5]
token: [@7,19:19='[',<22>,3:6]
token: [@8,20:21='10',<45>,3:7]
token: [@9,22:22=']',<23>,3:9]
token: [@10,23:23=';',<38>,3:10]
token: [@11,26:28='int',<15>,4:1]
token: [@12,30:30='i',<44>,4:5]
token: [@13,32:32='=',<40>,4:7]
token: [@14,34:34='3',<45>,4:9]
token: [@15,35:35=';',<38>,4:10]
token: [@16,75:75='*',<32>,9:1]
token: [@17,76:76='/',<33>,9:2]
token: [@18,79:84='return',<16>,10:1]
token: [@19,86:86='i',<44>,10:8]
token: [@20,87:87=';',<38>,10:9]
token: [@21,89:89='}',<25>,11:0]
token: [@22,91:90='<EOF>',<-1>,12:0]
tree: (compUnit (funcDef (funcType (btype int)) main ( ) (block { (blockItem (decl (varDecl (btype int) (varDef a [ 10 ]) ;))) (blockItem (decl (varDecl (btype int) (varDef i = (constInitVal (constExp (number 3)))) ;))) * / (blockItem (stmt return (exp (addExp (mulExp (unaryExp (primaryExp (lVal i)))))) ;)) })) <EOF>)
