token: [@0,0:2='int',<15>,1:0]
token: [@1,4:4='a',<44>,1:4]
token: [@2,6:6='=',<40>,1:6]
token: [@3,8:8='0',<45>,1:8]
token: [@4,9:9=';',<38>,1:9]
token: [@5,12:14='int',<15>,3:0]
token: [@6,16:18='foo',<44>,3:4]
token: [@7,19:19='(',<20>,3:7]
token: [@8,20:22='int',<15>,3:8]
token: [@9,24:24='a',<44>,3:12]
token: [@10,25:25=')',<21>,3:13]
token: [@11,27:27='{',<24>,4:0]
token: [@12,30:35='return',<16>,5:1]
token: [@13,37:37='a',<44>,5:8]
token: [@14,39:39='+',<30>,5:10]
token: [@15,41:41='a',<44>,5:12]
token: [@16,42:42=';',<38>,5:13]
token: [@17,44:44='}',<25>,6:0]
token: [@18,47:49='int',<15>,8:0]
token: [@19,51:54='main',<44>,8:4]
token: [@20,55:55='(',<20>,8:8]
token: [@21,56:56=')',<21>,8:9]
token: [@22,58:58='{',<24>,9:0]
token: [@23,61:63='int',<15>,10:1]
token: [@24,65:65='b',<44>,10:5]
token: [@25,67:67='=',<40>,10:7]
token: [@26,69:69='2',<45>,10:9]
token: [@27,70:70=';',<38>,10:10]
token: [@28,73:75='int',<15>,11:1]
token: [@29,77:77='c',<44>,11:5]
token: [@30,78:78='[',<22>,11:6]
token: [@31,79:81='foo',<44>,11:7]
token: [@32,82:82='(',<20>,11:10]
token: [@33,83:83='b',<44>,11:11]
token: [@34,84:84=')',<21>,11:12]
token: [@35,85:85=']',<23>,11:13]
token: [@36,86:86=';',<38>,11:14]
token: [@37,89:94='return',<16>,12:1]
token: [@38,96:96='0',<45>,12:8]
token: [@39,97:97=';',<38>,12:9]
token: [@40,99:99='}',<25>,13:0]
token: [@41,101:100='<EOF>',<-1>,14:0]
tree: (compUnit (decl (varDecl (btype int) (varDef a = (constInitVal (constExp (number 0)))) ;)) (funcDef (funcType (btype int)) foo ( (funcFParams (funcFParam (btype int) a)) ) (block { (blockItem (stmt return (exp (addExp (mulExp (unaryExp (primaryExp (lVal a)))) + (mulExp (unaryExp (primaryExp (lVal a)))))) ;)) })) (funcDef (funcType (btype int)) main ( ) (block { (blockItem (decl (varDecl (btype int) (varDef b = (constInitVal (constExp (number 2)))) ;))) (blockItem (decl (varDecl (btype int) (varDef c [) <missing ';'>))) (blockItem (stmt (exp (addExp (mulExp (unaryExp foo ( (funcRParams (exp (addExp (mulExp (unaryExp (primaryExp (lVal b))))))) ))))) ] ;)) (blockItem (stmt return (exp (addExp (mulExp (unaryExp (primaryExp (number 0)))))) ;)) })) <EOF>)
